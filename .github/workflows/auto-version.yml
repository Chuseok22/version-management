name: Version Management

on:
  workflow_call:
    inputs:
      # 프로젝트 타입
      project_type:
        description: "프로젝트 타입 설정 (spring | next | auto) - 기본: auto"
        required: false
        type: string
        default: "auto"

      # main 에서만 실행 강제
      default_branch:
        description: "실행할 기본 브랜치명 (예: main) - 기본 main"
        required: false
        type: string
        default: "main"

      # 버전 증가 트리거 방식: 커밋 한 줄(subject) 패턴만 허용
      tag_prefix:
        description: "태그 prefix (예: v) - 기본: v"
        required: false
        type: string
        default: "v"

      # 버전이 없는 경우 초기 버전 설정
      default_version:
        description: "초기 버전(태그/파일 모두 없을 때) - 기본: 0.0.0"
        required: false
        type: string
        default: "0.0.0"

      # Next.js 상수 파일 경로
      next_constants_path:
        description: "Next.js 버전 상수 경로 - 기본: src/constants/version.ts"
        required: false
        type: string
        default: "src/constants/version.ts"

      # Spring Boot application.yml 의 version 키 치환 (true/false)
      sync_app_yaml:
        description: "Spring application.yml 의 version 키 치환 (true/false) - 기본: false"
        required: false
        type: string
        default: "false"

      # 모노레포 하위 작업경로
      workdir:
        description: "하위 폴더 (예: backend/ 또는 web/). 빈 값이면 루트경로 - 기본: 루트경로"
        required: false
        type: string
        default: ""

      # 후속 워크플로우 트리거
      dispatch_on_bump:
        description: "버전 증가 시 repository_dispatch 이벤트 전송 여부 - 기본: true"
        required: false
        type: string
        default: "true"

      dispatch_event_type:
        description: "repository_dispatch 이벤트 타입 - 기본: version-bumped"
        required: false
        type: string
        default: "version-bumped"

      # 일반 프로젝트 버전 파일 경로
      plain_version_file:
        description: "일반 프로젝트 버전 관리 파일 경로 - 기본: VERSION"
        required: false
        type: string
        default: "VERSION"

      # 릴리즈 생성 여부
      create_release:
        description: "버전 증가 시 GitHub Release 생성 여부 - 기본: true"
        required: false
        type: string
        default: "true"

      # 릴리즈 태그 latest 마킹 여부
      release_latest:
        description: "생성한 릴리즈를 latest로 마킹할지 여부 - 기본: true"
        required: false
        type: string
        default: "true"

      # pre-release 여부
      release_prerelease:
        default: "생성한 릴리즈를 pre-release로 표시할지 여부 - 기본: false"
        required: false
        type: string
        description: "false"

    outputs:
      version_bumped:
        description: "버전 증가 여부 (true/false)"
        value: ${{ jobs.version.outputs.version_bumped }}

      bump_level:
        description: "major | minor | patch | none"
        value: ${{ jobs.version.outputs.bump_level }}

      new_version:
        description: "증가 후 버전 (예: 1.0.3)"
        value: ${{ jobs.version.outputs.new_version }}

      new_tag:
        description: "증가 후 태그 (예: v1.0.3)"
        value: ${{ jobs.version.outputs.new_tag }}

permissions:
  contents: write
  actions: read

concurrency:
  group: version-management-${{ github.repository }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  version:
    name: Version Bump (central)
    runs-on: ubuntu-latest
    outputs:
      version_bumped: ${{ steps.bump.outputs.version_bumped }} # 버전 증가 여부 (true/false)
      bump_level: ${{ steps.bump.outputs.bump_level }}
      new_version: ${{ steps.bump.outputs.new_version }}
      new_tag: ${{ steps.bump.outputs.new_tag }}
      plain_version_file: ${{ inputs.plain_version_file }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # action.yml 호출
      - id: bump
        uses: chuseok22/version-management@v1
        with:
          project_type:        ${{ inputs.project_type }}
          default_branch:      ${{ inputs.default_branch }}
          tag_prefix:          ${{ inputs.tag_prefix }}
          default_version:     ${{ inputs.default_version }}
          next_constants_path: ${{ inputs.next_constants_path }}
          sync_app_yaml:       ${{ inputs.sync_app_yaml }}
          workdir:             ${{ inputs.workdir }}
          plain_version_file: ${{ inputs.plain_version_file }}

      # GitHub Release 생성 (자동 생성 릴리즈 노트)
      - name: GitHub Release 생성 (릴리즈 노트 자동생성)
        if: ${{ steps.bump.outputs.version_bumped == 'true' && inputs.create_release == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.bump.outputs.new_tag }}
        run: |
          set -euo pipefail
          echo "Target tag: $TAG"

          # 플래그 구성
          FLAGS=""
          if [ "${{ inputs.release_latest }}" = "true" ]; then
            FLAGS="$FLAGS --latest"
          fi
          if [ "${{ inputs.release_prerelease }}" = "true" ]; then
            FLAGS="$FLAGS --prerelease"
          fi

          # 중복 방지: 릴리스가 이미 있으면 스킵
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists. Skip creating."
          else
            gh release create "$TAG" --generate-notes --title "$TAG" $FLAGS
          fi

      # 버전 bump 시 repository_dispatch 전송
      - name: Send repository_dispatch (only when bumped)
        if: ${{ steps.bump.outputs.version_bumped == 'true' && inputs.dispatch_on_bump == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -s -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d $'{
              "event_type": "${{ inputs.dispatch_event_type }}",
              "client_payload": {
                "new_version": "${{ steps.bump.outputs.new_version }}",
                "new_tag":     "${{ steps.bump.outputs.new_tag }}",
                "bump_level":  "${{ steps.bump.outputs.bump_level }}",
                "sha":         "${{ github.sha }}"
              }
            }'
